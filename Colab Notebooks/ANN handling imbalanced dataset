{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"ANN handling imbalanced dataset","provenance":[],"collapsed_sections":[],"mount_file_id":"1JqCPKmONMcj97e3Jyt8lYyW9UpobPr1-","authorship_tag":"ABX9TyOQh//Af/ex4fTcQZGAXoyf"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"o3qe5rdMuBJZ","executionInfo":{"status":"ok","timestamp":1610953882419,"user_tz":-330,"elapsed":1122,"user":{"displayName":"vikas sao","photoUrl":"","userId":"08189896451819436987"}}},"source":["import time\r\n","import numpy as np\r\n","import pandas as pd\r\n","import seaborn as sns\r\n","import random\r\n","import math\r\n","import sys\r\n","import copy\r\n","import matplotlib.pyplot as plt \r\n","%matplotlib inline\r\n","from sklearn.preprocessing import LabelEncoder \r\n","from sklearn.model_selection import train_test_split\r\n","import warnings\r\n","warnings.filterwarnings('ignore') \r\n","from zipfile import ZipFile \r\n","import tensorflow as tf\r\n","from tensorflow import keras\r\n","import sklearn\r\n"],"execution_count":54,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":649},"id":"e91qwukkuHfZ","executionInfo":{"status":"ok","timestamp":1610953883752,"user_tz":-330,"elapsed":2433,"user":{"displayName":"vikas sao","photoUrl":"","userId":"08189896451819436987"}},"outputId":"2be0f722-6c50-410a-d153-b9d38e65f0f5"},"source":["data = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Telco-Customer-Churn.csv')\r\n","data.drop(['customerID'] ,axis=1,inplace =True)\r\n","df = data\r\n","le =LabelEncoder()\r\n","\r\n","\r\n","# for col in data.columns:\r\n","#   if data[col].dtype=='float64':\r\n","#     continue\r\n","#   if data[col].dtype=='int64':\r\n","#     data[col] = data[col].astype(float)\r\n","#     continue\r\n","#   if data[col].unique().all==['Male' ,'Female']:\r\n","#     data[col]  = le.fit_transform(data[col])\r\n","#   if data[col].unique().all==['Female' ,'Male']:\r\n","#     data[col]  = le.fit_transform(data[col])\r\n","#   if data[col].unique().all==['Yes' ,'No']:\r\n","#     data[col]  = le.fit_transform(data[col])\r\n","#   if data[col].unique().all==['No' ,'Yes']:\r\n","#     data[col]  = le.fit_transform(data[col])\r\n","#   if data[col].dtype=='int64':\r\n","#     data[col] = data[col].astype(float)\r\n","#     continue\r\n"," \r\n","#   if len(data[col].unique())==2 and data[col].dtype=='object':\r\n","#     data[col]  = le.fit_transform(data[col])\r\n","#   if len(data[col].unique())==3 and data[col].dtype=='object':\r\n","#     data = pd.get_dummies(data = data , columns=[col])  \r\n","  \r\n","# data['TotalCharges'] =data['TotalCharges'].fillna(str(data['TotalCharges'].mode()))\r\n","# # data['TotalCharges'] = pd.to_numeric(data['TotalCharges'])\r\n","# # data['TotalCharges'] = data['TotalCharges'].astype('float64')\r\n","\r\n","# print(data['TotalCharges'].iloc[488])\r\n","\r\n","\r\n","\r\n","\r\n","# data['MultipleLines'].replace(['No phone service','No','Yes'] ,['0','1','2'] , inplace=True)\r\n","# data['InternetService'].replace(['No','DSL','Fiber optic'] ,['0','1','2'] , inplace=True)\r\n","# data['Contract'].replace(['One year','Two year','Month-to-month'] ,['0','1','2'] , inplace=True)\r\n","# data['PaymentMethod'].replace(['Electronic check','Mailed check','Bank transfer (automatic)' ,'Credit card (automatic)'] ,['0','1','2','3'] , inplace=True)\r\n","\r\n","\r\n","# c =['gender', 'Partner' ,'Dependents' , 'PhoneService' , 'OnlineSecurity' ,'OnlineBackup' , 'DeviceProtection' , 'TechSupport' , 'StreamingTV', 'StreamingMovies'\r\n","#     , 'PaperlessBilling' ]\r\n","# for x in c: \r\n","#   data[x] = le.fit_transform(data[x])\r\n","#   data[x] = data[x].fillna(data[x].mean())\r\n","\r\n","# for col in data.columns:\r\n","#   data[col].notnull() = pd.to_numeric(data[col].notnull(), downcast='float')\r\n","  # data[col] = data[col].astype('float32')\r\n","  # if data[col].dtype=='object':\r\n","\r\n","  #   data.drop([col] , axis=1,inplace =True)\r\n","  #   print(col)\r\n","  # x =data[col]\r\n","  # print(x)\r\n"," \r\n","\r\n","print(data.dtypes)\r\n","data.head()"],"execution_count":55,"outputs":[{"output_type":"stream","text":["gender               object\n","SeniorCitizen         int64\n","Partner              object\n","Dependents           object\n","tenure                int64\n","PhoneService         object\n","MultipleLines        object\n","InternetService      object\n","OnlineSecurity       object\n","OnlineBackup         object\n","DeviceProtection     object\n","TechSupport          object\n","StreamingTV          object\n","StreamingMovies      object\n","Contract             object\n","PaperlessBilling     object\n","PaymentMethod        object\n","MonthlyCharges      float64\n","TotalCharges         object\n","Churn                object\n","dtype: object\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>gender</th>\n","      <th>SeniorCitizen</th>\n","      <th>Partner</th>\n","      <th>Dependents</th>\n","      <th>tenure</th>\n","      <th>PhoneService</th>\n","      <th>MultipleLines</th>\n","      <th>InternetService</th>\n","      <th>OnlineSecurity</th>\n","      <th>OnlineBackup</th>\n","      <th>DeviceProtection</th>\n","      <th>TechSupport</th>\n","      <th>StreamingTV</th>\n","      <th>StreamingMovies</th>\n","      <th>Contract</th>\n","      <th>PaperlessBilling</th>\n","      <th>PaymentMethod</th>\n","      <th>MonthlyCharges</th>\n","      <th>TotalCharges</th>\n","      <th>Churn</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Female</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>1</td>\n","      <td>No</td>\n","      <td>No phone service</td>\n","      <td>DSL</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Month-to-month</td>\n","      <td>Yes</td>\n","      <td>Electronic check</td>\n","      <td>29.85</td>\n","      <td>29.85</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Male</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>34</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>DSL</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>One year</td>\n","      <td>No</td>\n","      <td>Mailed check</td>\n","      <td>56.95</td>\n","      <td>1889.5</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Male</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>2</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>DSL</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Month-to-month</td>\n","      <td>Yes</td>\n","      <td>Mailed check</td>\n","      <td>53.85</td>\n","      <td>108.15</td>\n","      <td>Yes</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Male</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>45</td>\n","      <td>No</td>\n","      <td>No phone service</td>\n","      <td>DSL</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>One year</td>\n","      <td>No</td>\n","      <td>Bank transfer (automatic)</td>\n","      <td>42.30</td>\n","      <td>1840.75</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Female</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>2</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>Fiber optic</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>Month-to-month</td>\n","      <td>Yes</td>\n","      <td>Electronic check</td>\n","      <td>70.70</td>\n","      <td>151.65</td>\n","      <td>Yes</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   gender  SeniorCitizen Partner  ... MonthlyCharges  TotalCharges Churn\n","0  Female              0     Yes  ...          29.85         29.85    No\n","1    Male              0      No  ...          56.95        1889.5    No\n","2    Male              0      No  ...          53.85        108.15   Yes\n","3    Male              0      No  ...          42.30       1840.75    No\n","4  Female              0      No  ...          70.70        151.65   Yes\n","\n","[5 rows x 20 columns]"]},"metadata":{"tags":[]},"execution_count":55}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JY_sOsyDD3uT","executionInfo":{"status":"ok","timestamp":1610953883756,"user_tz":-330,"elapsed":2417,"user":{"displayName":"vikas sao","photoUrl":"","userId":"08189896451819436987"}},"outputId":"8c7882b4-101b-4bc4-b612-45a09ed30b0f"},"source":["\r\n","df1 = df[df.TotalCharges!=' ']\r\n","df1.shape"],"execution_count":56,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(7032, 20)"]},"metadata":{"tags":[]},"execution_count":56}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":312},"id":"6_6ebTA9DJ7_","executionInfo":{"status":"ok","timestamp":1610953883761,"user_tz":-330,"elapsed":2408,"user":{"displayName":"vikas sao","photoUrl":"","userId":"08189896451819436987"}},"outputId":"7b4046f5-43fc-4407-eb5f-bf72441a9f13"},"source":["\r\n","tenure_churn_no = df1[df1.Churn=='No'].tenure\r\n","tenure_churn_yes = df1[df1.Churn=='Yes'].tenure\r\n","\r\n","plt.xlabel(\"tenure\")\r\n","plt.ylabel(\"Number Of Customers\")\r\n","plt.title(\"Customer Churn Prediction Visualiztion\")\r\n","\r\n","blood_sugar_men = [113, 85, 90, 150, 149, 88, 93, 115, 135, 80, 77, 82, 129]\r\n","blood_sugar_women = [67, 98, 89, 120, 133, 150, 84, 69, 89, 79, 120, 112, 100]\r\n","\r\n","plt.hist([tenure_churn_yes, tenure_churn_no], rwidth=0.95, color=['green','red'],label=['Churn=Yes','Churn=No'])\r\n","plt.legend()"],"execution_count":57,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7f2b48fa0ba8>"]},"metadata":{"tags":[]},"execution_count":57},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":312},"id":"cKBB9foKDSou","executionInfo":{"status":"ok","timestamp":1610953883767,"user_tz":-330,"elapsed":2392,"user":{"displayName":"vikas sao","photoUrl":"","userId":"08189896451819436987"}},"outputId":"e00bc733-f7b2-4ba6-df39-1fac3c46ef8a"},"source":["mc_churn_no = df1[df1.Churn=='No'].MonthlyCharges      \r\n","mc_churn_yes = df1[df1.Churn=='Yes'].MonthlyCharges      \r\n","\r\n","plt.xlabel(\"Monthly Charges\")\r\n","plt.ylabel(\"Number Of Customers\")\r\n","plt.title(\"Customer Churn Prediction Visualiztion\")\r\n","\r\n","blood_sugar_men = [113, 85, 90, 150, 149, 88, 93, 115, 135, 80, 77, 82, 129]\r\n","blood_sugar_women = [67, 98, 89, 120, 133, 150, 84, 69, 89, 79, 120, 112, 100]\r\n","\r\n","plt.hist([mc_churn_yes, mc_churn_no], rwidth=0.95, color=['green','red'],label=['Churn=Yes','Churn=No'])\r\n","plt.legend()"],"execution_count":58,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7f2bc90eed30>"]},"metadata":{"tags":[]},"execution_count":58},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"OfuvXAvWDTWL","executionInfo":{"status":"ok","timestamp":1610953883768,"user_tz":-330,"elapsed":2379,"user":{"displayName":"vikas sao","photoUrl":"","userId":"08189896451819436987"}}},"source":["def print_unique_col_values(df):\r\n","       for column in df:\r\n","            if df[column].dtypes=='object':\r\n","                print(f'{column}: {df[column].unique()}')"],"execution_count":59,"outputs":[]},{"cell_type":"code","metadata":{"id":"pmKeRJAXDVqj","executionInfo":{"status":"ok","timestamp":1610953883770,"user_tz":-330,"elapsed":2373,"user":{"displayName":"vikas sao","photoUrl":"","userId":"08189896451819436987"}}},"source":["df1.replace('No internet service','No',inplace=True)\r\n","df1.replace('No phone service','No',inplace=True)"],"execution_count":60,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H-o9NSUuDZjB","executionInfo":{"status":"ok","timestamp":1610953883771,"user_tz":-330,"elapsed":2364,"user":{"displayName":"vikas sao","photoUrl":"","userId":"08189896451819436987"}},"outputId":"bc309c93-5bdb-41fc-ad24-59331d454bab"},"source":["print_unique_col_values(df1)"],"execution_count":61,"outputs":[{"output_type":"stream","text":["gender: ['Female' 'Male']\n","Partner: ['Yes' 'No']\n","Dependents: ['No' 'Yes']\n","PhoneService: ['No' 'Yes']\n","MultipleLines: ['No' 'Yes']\n","InternetService: ['DSL' 'Fiber optic' 'No']\n","OnlineSecurity: ['No' 'Yes']\n","OnlineBackup: ['Yes' 'No']\n","DeviceProtection: ['No' 'Yes']\n","TechSupport: ['No' 'Yes']\n","StreamingTV: ['No' 'Yes']\n","StreamingMovies: ['No' 'Yes']\n","Contract: ['Month-to-month' 'One year' 'Two year']\n","PaperlessBilling: ['Yes' 'No']\n","PaymentMethod: ['Electronic check' 'Mailed check' 'Bank transfer (automatic)'\n"," 'Credit card (automatic)']\n","TotalCharges: ['29.85' '1889.5' '108.15' ... '346.45' '306.6' '6844.5']\n","Churn: ['No' 'Yes']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"rgPYoK5SDcWX","executionInfo":{"status":"ok","timestamp":1610953883772,"user_tz":-330,"elapsed":2355,"user":{"displayName":"vikas sao","photoUrl":"","userId":"08189896451819436987"}}},"source":["\r\n","yes_no_columns = ['Partner','Dependents','PhoneService','MultipleLines','OnlineSecurity','OnlineBackup',\r\n","                  'DeviceProtection','TechSupport','StreamingTV','StreamingMovies','PaperlessBilling','Churn']\r\n","for col in yes_no_columns:\r\n","    df1[col].replace({'Yes': 1,'No': 0},inplace=True)\r\n","    "],"execution_count":62,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vo-_Q0NLDeq2","executionInfo":{"status":"ok","timestamp":1610953883773,"user_tz":-330,"elapsed":2346,"user":{"displayName":"vikas sao","photoUrl":"","userId":"08189896451819436987"}},"outputId":"1a881cde-34fc-4546-f716-89b23f5825b9"},"source":["for col in df1:\r\n","    print(f'{col}: {df1[col].unique()}')"],"execution_count":63,"outputs":[{"output_type":"stream","text":["gender: ['Female' 'Male']\n","SeniorCitizen: [0 1]\n","Partner: [1 0]\n","Dependents: [0 1]\n","tenure: [ 1 34  2 45  8 22 10 28 62 13 16 58 49 25 69 52 71 21 12 30 47 72 17 27\n","  5 46 11 70 63 43 15 60 18 66  9  3 31 50 64 56  7 42 35 48 29 65 38 68\n"," 32 55 37 36 41  6  4 33 67 23 57 61 14 20 53 40 59 24 44 19 54 51 26 39]\n","PhoneService: [0 1]\n","MultipleLines: [0 1]\n","InternetService: ['DSL' 'Fiber optic' 'No']\n","OnlineSecurity: [0 1]\n","OnlineBackup: [1 0]\n","DeviceProtection: [0 1]\n","TechSupport: [0 1]\n","StreamingTV: [0 1]\n","StreamingMovies: [0 1]\n","Contract: ['Month-to-month' 'One year' 'Two year']\n","PaperlessBilling: [1 0]\n","PaymentMethod: ['Electronic check' 'Mailed check' 'Bank transfer (automatic)'\n"," 'Credit card (automatic)']\n","MonthlyCharges: [29.85 56.95 53.85 ... 63.1  44.2  78.7 ]\n","TotalCharges: ['29.85' '1889.5' '108.15' ... '346.45' '306.6' '6844.5']\n","Churn: [0 1]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"tL_z4ZFHDgv8","executionInfo":{"status":"ok","timestamp":1610953884206,"user_tz":-330,"elapsed":2768,"user":{"displayName":"vikas sao","photoUrl":"","userId":"08189896451819436987"}}},"source":["df1['gender'].replace({'Female':1,'Male':0},inplace=True)"],"execution_count":64,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VlL_buZyDiYg","executionInfo":{"status":"ok","timestamp":1610953884208,"user_tz":-330,"elapsed":2760,"user":{"displayName":"vikas sao","photoUrl":"","userId":"08189896451819436987"}},"outputId":"e42ce0da-da95-4d20-da55-7766b272f915"},"source":["\r\n","df2 = pd.get_dummies(data=df1, columns=['InternetService','Contract','PaymentMethod'])\r\n","df2.columns"],"execution_count":65,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['gender', 'SeniorCitizen', 'Partner', 'Dependents', 'tenure',\n","       'PhoneService', 'MultipleLines', 'OnlineSecurity', 'OnlineBackup',\n","       'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies',\n","       'PaperlessBilling', 'MonthlyCharges', 'TotalCharges', 'Churn',\n","       'InternetService_DSL', 'InternetService_Fiber optic',\n","       'InternetService_No', 'Contract_Month-to-month', 'Contract_One year',\n","       'Contract_Two year', 'PaymentMethod_Bank transfer (automatic)',\n","       'PaymentMethod_Credit card (automatic)',\n","       'PaymentMethod_Electronic check', 'PaymentMethod_Mailed check'],\n","      dtype='object')"]},"metadata":{"tags":[]},"execution_count":65}]},{"cell_type":"code","metadata":{"id":"2VLzA_LADi4F","executionInfo":{"status":"ok","timestamp":1610953884209,"user_tz":-330,"elapsed":2748,"user":{"displayName":"vikas sao","photoUrl":"","userId":"08189896451819436987"}}},"source":["cols_to_scale = ['tenure','MonthlyCharges','TotalCharges']\r\n","\r\n","from sklearn.preprocessing import MinMaxScaler\r\n","scaler = MinMaxScaler()\r\n","df2[cols_to_scale] = scaler.fit_transform(df2[cols_to_scale])\r\n"],"execution_count":66,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":275},"id":"7KIn4uf8DlYY","executionInfo":{"status":"ok","timestamp":1610953884211,"user_tz":-330,"elapsed":2738,"user":{"displayName":"vikas sao","photoUrl":"","userId":"08189896451819436987"}},"outputId":"bd6caf59-ff22-45ca-a4ed-257c1e8279cb"},"source":["data = df2\r\n","print(data.shape)\r\n","data.head()"],"execution_count":67,"outputs":[{"output_type":"stream","text":["(7032, 27)\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>gender</th>\n","      <th>SeniorCitizen</th>\n","      <th>Partner</th>\n","      <th>Dependents</th>\n","      <th>tenure</th>\n","      <th>PhoneService</th>\n","      <th>MultipleLines</th>\n","      <th>OnlineSecurity</th>\n","      <th>OnlineBackup</th>\n","      <th>DeviceProtection</th>\n","      <th>TechSupport</th>\n","      <th>StreamingTV</th>\n","      <th>StreamingMovies</th>\n","      <th>PaperlessBilling</th>\n","      <th>MonthlyCharges</th>\n","      <th>TotalCharges</th>\n","      <th>Churn</th>\n","      <th>InternetService_DSL</th>\n","      <th>InternetService_Fiber optic</th>\n","      <th>InternetService_No</th>\n","      <th>Contract_Month-to-month</th>\n","      <th>Contract_One year</th>\n","      <th>Contract_Two year</th>\n","      <th>PaymentMethod_Bank transfer (automatic)</th>\n","      <th>PaymentMethod_Credit card (automatic)</th>\n","      <th>PaymentMethod_Electronic check</th>\n","      <th>PaymentMethod_Mailed check</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0.115423</td>\n","      <td>0.001275</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.464789</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.385075</td>\n","      <td>0.215867</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.014085</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0.354229</td>\n","      <td>0.010310</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.619718</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.239303</td>\n","      <td>0.210241</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.014085</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0.521891</td>\n","      <td>0.015330</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   gender  ...  PaymentMethod_Mailed check\n","0       1  ...                           0\n","1       0  ...                           1\n","2       0  ...                           1\n","3       0  ...                           0\n","4       1  ...                           0\n","\n","[5 rows x 27 columns]"]},"metadata":{"tags":[]},"execution_count":67}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":976},"id":"CFG_qZGnERiY","executionInfo":{"status":"ok","timestamp":1610953886930,"user_tz":-330,"elapsed":5440,"user":{"displayName":"vikas sao","photoUrl":"","userId":"08189896451819436987"}},"outputId":"845094ad-36ee-4cee-c2a4-d5c00e0c23a4"},"source":["# general way\r\n","\r\n","X = data.drop(['Churn'] ,axis=1 )\r\n","Y=data['Churn'] \r\n","X_train  ,  X_test   , Y_train , Y_test   = train_test_split(X,Y,test_size=0.2) \r\n","X.head()\r\n","model  = keras.Sequential([\r\n","        keras.layers.Dense(200 ,input_shape=(len(X_train.columns) ,) ,activation='relu'),\r\n","        keras.layers.Dense(100,activation='relu'),\r\n","        keras.layers.Dense(50 ,activation='relu'),\r\n","        keras.layers.Dense(1 ,activation='sigmoid')\r\n","])\r\n","model.compile(\r\n","    optimizer='adam' ,\r\n","    loss ='binary_crossentropy' ,\r\n","    metrics =['accuracy']\r\n",")\r\n","\r\n","model.fit(X_train , Y_train , epochs =5)\r\n","\r\n","predict = model.predict(X_test )\r\n","for i in range(len(predict)):\r\n","  if(predict[i]<=.5):\r\n","    predict[i] =0\r\n","  else:\r\n","    predict[i] =1\r\n","print(predict[0:10])\r\n","print(Y_test[0:10])\r\n","\r\n","\r\n","#evaluation\r\n","from sklearn.metrics import accuracy_score , confusion_matrix, classification_report\r\n","cm = confusion_matrix(Y_test ,predict )\r\n","print(classification_report(Y_test , predict))\r\n","sns.heatmap(cm , annot = True , fmt ='d')\r\n","plt.xlabel('truth')\r\n","plt.ylabel('predicted')\r\n","\r\n"],"execution_count":68,"outputs":[{"output_type":"stream","text":["Epoch 1/5\n","176/176 [==============================] - 1s 3ms/step - loss: 0.4969 - accuracy: 0.7485\n","Epoch 2/5\n","176/176 [==============================] - 0s 3ms/step - loss: 0.4150 - accuracy: 0.7974\n","Epoch 3/5\n","176/176 [==============================] - 0s 3ms/step - loss: 0.4054 - accuracy: 0.8139\n","Epoch 4/5\n","176/176 [==============================] - 0s 3ms/step - loss: 0.4031 - accuracy: 0.8092\n","Epoch 5/5\n","176/176 [==============================] - 0s 2ms/step - loss: 0.4039 - accuracy: 0.8082\n","[[1.]\n"," [1.]\n"," [0.]\n"," [1.]\n"," [0.]\n"," [0.]\n"," [0.]\n"," [0.]\n"," [0.]\n"," [0.]]\n","3364    1\n","2319    0\n","839     0\n","6428    1\n","6632    1\n","6286    0\n","5408    0\n","3224    1\n","1584    0\n","3645    0\n","Name: Churn, dtype: int64\n","              precision    recall  f1-score   support\n","\n","           0       0.85      0.89      0.87      1060\n","           1       0.61      0.52      0.56       347\n","\n","    accuracy                           0.80      1407\n","   macro avg       0.73      0.70      0.71      1407\n","weighted avg       0.79      0.80      0.79      1407\n","\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["Text(33.0, 0.5, 'predicted')"]},"metadata":{"tags":[]},"execution_count":68},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":670},"id":"7bu2WCE1O-fJ","executionInfo":{"status":"ok","timestamp":1610954121669,"user_tz":-330,"elapsed":2789,"user":{"displayName":"vikas sao","photoUrl":"","userId":"08189896451819436987"}},"outputId":"d954e664-8ed3-4d5e-a084-cef0bd4bade0"},"source":["#   under sampling \r\n","data_1 = data[data['Churn']==1]\r\n","data_0 = data[data['Churn']==0]\r\n","data_0 =data_0.sample(len(data_1))\r\n","data_under  = pd.concat([data_0 , data_1] ,axis =0 )\r\n","print(data_under['Churn'].value_counts())\r\n","X = data_under.drop(['Churn'] ,axis=1 )\r\n","Y=data_under['Churn'] \r\n","X_train  ,  X_test   , Y_train , Y_test   = train_test_split(X,Y,test_size=0.2 ,stratify = Y) \r\n","X.head()\r\n","model  = keras.Sequential([\r\n","        keras.layers.Dense(200 ,input_shape=(len(X_train.columns) ,) ,activation='relu'),\r\n","        keras.layers.Dense(100,activation='relu'),\r\n","        keras.layers.Dense(50 ,activation='relu'),\r\n","        keras.layers.Dense(1 ,activation='sigmoid')\r\n","])\r\n","model.compile(\r\n","    optimizer='adam' ,\r\n","    loss ='binary_crossentropy' ,\r\n","    metrics =['accuracy']\r\n",")\r\n","model.fit(X_train , Y_train , epochs =5)\r\n","predict = model.predict(X_test )\r\n","for i in range(len(predict)):\r\n","  if(predict[i]<=.5):\r\n","    predict[i] =0\r\n","  else:\r\n","    predict[i] =1\r\n","# print(predict[0:10])\r\n","# print(Y_test[0:10])\r\n","\r\n","\r\n","#evaluation\r\n","from sklearn.metrics import accuracy_score , confusion_matrix, classification_report\r\n","cm = confusion_matrix(Y_test ,predict )\r\n","print(classification_report(Y_test , predict))\r\n","sns.heatmap(cm , annot = True , fmt ='d')\r\n","plt.xlabel('truth')\r\n","plt.ylabel('predicted')\r\n","\r\n"],"execution_count":72,"outputs":[{"output_type":"stream","text":["1    1869\n","0    1869\n","Name: Churn, dtype: int64\n","Epoch 1/5\n","94/94 [==============================] - 1s 2ms/step - loss: 0.5838 - accuracy: 0.6929\n","Epoch 2/5\n","94/94 [==============================] - 0s 2ms/step - loss: 0.5013 - accuracy: 0.7588\n","Epoch 3/5\n","94/94 [==============================] - 0s 2ms/step - loss: 0.4743 - accuracy: 0.7713\n","Epoch 4/5\n","94/94 [==============================] - 0s 2ms/step - loss: 0.4844 - accuracy: 0.7666\n","Epoch 5/5\n","94/94 [==============================] - 0s 2ms/step - loss: 0.4766 - accuracy: 0.7686\n","              precision    recall  f1-score   support\n","\n","           0       0.75      0.79      0.77       374\n","           1       0.78      0.74      0.76       374\n","\n","    accuracy                           0.77       748\n","   macro avg       0.77      0.77      0.77       748\n","weighted avg       0.77      0.77      0.77       748\n","\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["Text(33.0, 0.5, 'predicted')"]},"metadata":{"tags":[]},"execution_count":72},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":670},"id":"bgDIRFUfWTlY","executionInfo":{"status":"ok","timestamp":1610954731876,"user_tz":-330,"elapsed":5012,"user":{"displayName":"vikas sao","photoUrl":"","userId":"08189896451819436987"}},"outputId":"3ed6522f-6db1-4040-bbec-ae14dfa0e01d"},"source":["#   over sampling \r\n","\r\n","\r\n","data_1 = data[data['Churn']==1]\r\n","data_0 = data[data['Churn']==0]\r\n","data_1_over =data_1.sample(len(data_0) , replace   = True)\r\n","data_over  = pd.concat([data_0 , data_1_over] ,axis =0 )\r\n","print(data_over['Churn'].value_counts())\r\n","X = data_over.drop(['Churn'] ,axis=1 )\r\n","Y=data_over['Churn'] \r\n","X_train  ,  X_test   , Y_train , Y_test   = train_test_split(X,Y,test_size=0.2 ,stratify = Y) \r\n","X.head()\r\n","model  = keras.Sequential([\r\n","        keras.layers.Dense(200 ,input_shape=(len(X_train.columns) ,) ,activation='relu'),\r\n","        keras.layers.Dense(100,activation='relu'),\r\n","        keras.layers.Dense(50 ,activation='relu'),\r\n","        keras.layers.Dense(1 ,activation='sigmoid')\r\n","])\r\n","model.compile(\r\n","    optimizer='adam' ,\r\n","    loss ='binary_crossentropy' ,\r\n","    metrics =['accuracy']\r\n",")\r\n","model.fit(X_train , Y_train , epochs =5)\r\n","predict = model.predict(X_test )\r\n","for i in range(len(predict)):\r\n","  if(predict[i]<=.5):\r\n","    predict[i] =0\r\n","  else:\r\n","    predict[i] =1\r\n","# print(predict[0:10])\r\n","# print(Y_test[0:10])\r\n","\r\n","\r\n","#evaluation\r\n","from sklearn.metrics import accuracy_score , confusion_matrix, classification_report\r\n","cm = confusion_matrix(Y_test ,predict )\r\n","print(classification_report(Y_test , predict))\r\n","sns.heatmap(cm , annot = True , fmt ='d')\r\n","plt.xlabel('truth')\r\n","plt.ylabel('predicted')\r\n","\r\n"],"execution_count":80,"outputs":[{"output_type":"stream","text":["1    5163\n","0    5163\n","Name: Churn, dtype: int64\n","Epoch 1/5\n","259/259 [==============================] - 1s 2ms/step - loss: 0.5409 - accuracy: 0.7433\n","Epoch 2/5\n","259/259 [==============================] - 1s 2ms/step - loss: 0.4783 - accuracy: 0.7692\n","Epoch 3/5\n","259/259 [==============================] - 1s 2ms/step - loss: 0.4813 - accuracy: 0.7632\n","Epoch 4/5\n","259/259 [==============================] - 1s 2ms/step - loss: 0.4541 - accuracy: 0.7818\n","Epoch 5/5\n","259/259 [==============================] - 1s 2ms/step - loss: 0.4484 - accuracy: 0.7759\n","              precision    recall  f1-score   support\n","\n","           0       0.80      0.76      0.78      1033\n","           1       0.77      0.81      0.79      1033\n","\n","    accuracy                           0.79      2066\n","   macro avg       0.79      0.79      0.79      2066\n","weighted avg       0.79      0.79      0.79      2066\n","\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["Text(33.0, 0.5, 'predicted')"]},"metadata":{"tags":[]},"execution_count":80},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":704},"id":"NxtXC7SRZBhv","executionInfo":{"status":"ok","timestamp":1610955917844,"user_tz":-330,"elapsed":6836,"user":{"displayName":"vikas sao","photoUrl":"","userId":"08189896451819436987"}},"outputId":"d1d73d62-e0fd-4486-9cd8-662e30512480"},"source":["#   SMOTE sampling \r\n","\r\n","\r\n","\r\n","X = data.drop(['Churn'] ,axis=1 )\r\n","Y=data['Churn']\r\n","print(Y.value_counts())\r\n","from imblearn.over_sampling import SMOTE\r\n","smote=SMOTE(sampling_strategy = 'minority')\r\n","X_sm ,Y_sm  = smote.fit_sample(X,Y)\r\n","\r\n","print(X_sm.shape)\r\n","print(Y_sm.shape)\r\n","  \r\n","\r\n","X_train  ,  X_test   , Y_train , Y_test   = train_test_split(X_sm,Y_sm,test_size=0.2,random_state= 15 ,stratify = Y_sm) \r\n","X.head()\r\n","model  = keras.Sequential([\r\n","        keras.layers.Dense(26 ,input_dim = 26 ,activation='relu'),\r\n","        keras.layers.Dense(15,activation='relu'),\r\n","        keras.layers.Dense(1 ,activation='sigmoid')\r\n","])\r\n","model.compile(\r\n","    optimizer='adam' ,\r\n","    loss ='binary_crossentropy' ,\r\n","    metrics =['accuracy']\r\n",")\r\n"," \r\n","\r\n","\r\n","model.fit(X_train , Y_train , epochs =5)\r\n","predict = model.predict(X_test )\r\n","for i in range(len(predict)):\r\n","  if(predict[i]<=.5):\r\n","    predict[i] =0\r\n","  else:\r\n","    predict[i] =1\r\n","# print(predict[0:10])\r\n","# print(Y_test[0:10])\r\n","\r\n","\r\n","#evaluation\r\n","from sklearn.metrics import accuracy_score , confusion_matrix, classification_report\r\n","cm = confusion_matrix(Y_test ,predict )\r\n","print(classification_report(Y_test , predict))\r\n","sns.heatmap(cm , annot = True , fmt ='d')\r\n","plt.xlabel('truth')\r\n","plt.ylabel('predicted')\r\n","\r\n"],"execution_count":100,"outputs":[{"output_type":"stream","text":["0    5163\n","1    1869\n","Name: Churn, dtype: int64\n","(10326, 26)\n","(10326,)\n","Epoch 1/5\n","259/259 [==============================] - 1s 2ms/step - loss: 0.5940 - accuracy: 0.6794\n","Epoch 2/5\n","259/259 [==============================] - 1s 2ms/step - loss: 0.4799 - accuracy: 0.7730\n","Epoch 3/5\n","259/259 [==============================] - 1s 2ms/step - loss: 0.4670 - accuracy: 0.7744\n","Epoch 4/5\n","259/259 [==============================] - 1s 2ms/step - loss: 0.4648 - accuracy: 0.7782\n","Epoch 5/5\n","259/259 [==============================] - 1s 2ms/step - loss: 0.4580 - accuracy: 0.7792\n","              precision    recall  f1-score   support\n","\n","           0       0.79      0.74      0.77      1033\n","           1       0.76      0.81      0.78      1033\n","\n","    accuracy                           0.77      2066\n","   macro avg       0.77      0.77      0.77      2066\n","weighted avg       0.77      0.77      0.77      2066\n","\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["Text(33.0, 0.5, 'predicted')"]},"metadata":{"tags":[]},"execution_count":100},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":704},"id":"T_GU_mL8c9tn","executionInfo":{"status":"ok","timestamp":1610955979870,"user_tz":-330,"elapsed":5230,"user":{"displayName":"vikas sao","photoUrl":"","userId":"08189896451819436987"}},"outputId":"e08763e5-e2cb-47ec-c0d2-5210a9657e3a"},"source":["#   Ensemble with under sampling\r\n"," \r\n","\r\n","X = data.drop(['Churn'] ,axis=1 )\r\n","Y=data['Churn']\r\n","print(Y.value_counts())\r\n","from imblearn.over_sampling import SMOTE\r\n","smote=SMOTE(sampling_strategy = 'minority')\r\n","X_sm ,Y_sm  = smote.fit_sample(X,Y)\r\n","\r\n","print(X_sm.shape)\r\n","print(Y_sm.shape)\r\n","  \r\n","\r\n","X_train  ,  X_test   , Y_train , Y_test   = train_test_split(X_sm,Y_sm,test_size=0.2,random_state= 15 ,stratify = Y_sm) \r\n","X.head()\r\n","model  = keras.Sequential([\r\n","        keras.layers.Dense(26 ,input_dim = 26 ,activation='relu'),\r\n","        keras.layers.Dense(15,activation='relu'),\r\n","        keras.layers.Dense(1 ,activation='sigmoid')\r\n","])\r\n","model.compile(\r\n","    optimizer='adam' ,\r\n","    loss ='binary_crossentropy' ,\r\n","    metrics =['accuracy']\r\n",")\r\n"," \r\n","\r\n","\r\n","model.fit(X_train , Y_train , epochs =5)\r\n","predict = model.predict(X_test )\r\n","for i in range(len(predict)):\r\n","  if(predict[i]<=.5):\r\n","    predict[i] =0\r\n","  else:\r\n","    predict[i] =1\r\n","# print(predict[0:10])\r\n","# print(Y_test[0:10])\r\n","\r\n","\r\n","#evaluation\r\n","from sklearn.metrics import accuracy_score , confusion_matrix, classification_report\r\n","cm = confusion_matrix(Y_test ,predict )\r\n","print(classification_report(Y_test , predict))\r\n","sns.heatmap(cm , annot = True , fmt ='d')\r\n","plt.xlabel('truth')\r\n","plt.ylabel('predicted')\r\n","\r\n"],"execution_count":101,"outputs":[{"output_type":"stream","text":["0    5163\n","1    1869\n","Name: Churn, dtype: int64\n","(10326, 26)\n","(10326,)\n","Epoch 1/5\n","259/259 [==============================] - 1s 2ms/step - loss: 0.6306 - accuracy: 0.6191\n","Epoch 2/5\n","259/259 [==============================] - 1s 2ms/step - loss: 0.4903 - accuracy: 0.7606\n","Epoch 3/5\n","259/259 [==============================] - 1s 2ms/step - loss: 0.4770 - accuracy: 0.7664\n","Epoch 4/5\n","259/259 [==============================] - 1s 2ms/step - loss: 0.4673 - accuracy: 0.7749\n","Epoch 5/5\n","259/259 [==============================] - 1s 2ms/step - loss: 0.4618 - accuracy: 0.7827\n","              precision    recall  f1-score   support\n","\n","           0       0.80      0.71      0.76      1033\n","           1       0.74      0.83      0.78      1033\n","\n","    accuracy                           0.77      2066\n","   macro avg       0.77      0.77      0.77      2066\n","weighted avg       0.77      0.77      0.77      2066\n","\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["Text(33.0, 0.5, 'predicted')"]},"metadata":{"tags":[]},"execution_count":101},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]}]}